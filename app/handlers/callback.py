from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from typing import Union

import app.keyboards.reply_keyboard as rkb
import app.keyboards.inline_keyboard as ikb

import app.database.requests as rq

callback_router = Router()

class ApplicationStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É.
    """
    waiting_for_layout_option = State()
    waiting_for_corp = State()
    waiting_for_floor = State()
    waiting_for_section = State()
    waiting_for_apartment_number = State()
    waiting_for_payment_method = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_confirmation = State()


# ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_CHAT_ID = "1747118190" # !!! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID –ò–õ–ò ID –ì–†–£–ü–ü–´ –ê–î–ú–ò–ù–û–í !!!

# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"-------------------------------------------------------------------------------
@callback_router.message(F.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É')
async def start_application_form( message: Message, state: FSMContext):
    await state.set_state(ApplicationStates.waiting_for_layout_option)
    await message.answer(
        "üìù <b><i>–ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏!</i></b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏</b>:\n\n"
        "üè† <b>–ö–≤–∞—Ä—Ç–∏—Ä–∞-–õ–∏–Ω–µ–π–∫–∞</b> ‚Äî <i>–ß—Ç–æ —ç—Ç–æ?</i>\n"
        "–≠—Ç–æ –∫–æ–≥–¥–∞ <b>–í–°–ï –û–ö–ù–ê</b> (–∏ –∫—É—Ö–Ω–∏, –∏ –∫–æ–º–Ω–∞—Ç) –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ <b>–û–î–ù–£ –°–¢–û–†–û–ù–£</b> –¥–æ–º–∞.\n\n" # –î–æ–±–∞–≤–∏–ª \n\n –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        "‚ÜîÔ∏è <b>–ö–≤–∞—Ä—Ç–∏—Ä–∞-–†–∞—Å–ø–∞—à–æ–Ω–∫–∞</b> ‚Äî <i>–ß—Ç–æ —ç—Ç–æ?</i>\n" # –≠–º–æ–¥–∑–∏, –∂–∏—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫—É—Ä—Å–∏–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        "–≠—Ç–æ –∫–æ–≥–¥–∞ <b>–û–ö–ù–ê</b> –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ <b>–î–í–ï –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–´–ï –°–¢–û–†–û–ù–´</b> –¥–æ–º–∞." # –ñ–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        , parse_mode="HTML"
        , reply_markup=ikb.select_layout_option_kb)
     # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É

@callback_router.callback_query(ApplicationStates.waiting_for_layout_option, F.data.startswith('apartment_'))
async def process_apartment(callback: CallbackQuery, state: FSMContext):
    
    apartment_plan = callback.data.split('_')[1] # –ü–æ–ª—É—á–∞–µ–º "1", "2" –∏ —Ç.–¥.

    # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    apartment_name = {
        'lineika': '–ö–≤–∞—Ä—Ç–∏—Ä–∞-–ª–∏–Ω–µ–π–∫–∞',
        'open': '–ö–≤–∞—Ä—Ç–∏—Ä–∞-—Ä–∞—Å–ø–∞—à–æ–Ω–∫–∞',
        

    }.get(apartment_plan) # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –ø–æ–∫–∞–∂–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    await state.update_data(apartment_plan=apartment_name)
    await callback.answer()
    
    await state.set_state(ApplicationStates.waiting_for_floor)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {apartment_name}.\n\n–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å:",reply_markup=ikb.select_floor_kb ,parse_mode="Markdown")

'''
# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞----------------------------------------------------------------------------------------------
@callback_router.callback_query(ApplicationStates.waiting_for_corp, F.data.startswith('corp_'))
async def process_corp(callback: CallbackQuery, state: FSMContext):
    
    corp_number = callback.data.split('_')[1] # –ü–æ–ª—É—á–∞–µ–º "1", "2" –∏ —Ç.–¥.

    # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    corp_name = {
        '1': '–ö–æ—Ä–ø—É—Å 1',
        '2': '–ö–æ—Ä–ø—É—Å 2',
        '3': '–ö–æ—Ä–ø—É—Å 3',

    }.get(corp_number) # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –ø–æ–∫–∞–∂–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    await state.update_data(corp_number=corp_name)
    await callback.answer()
    
    await state.set_state(ApplicationStates.waiting_for_floor)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {corp_name}.\n\n–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å:",reply_markup=ikb.select_floor_kb ,parse_mode="Markdown")
'''

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∞–∂–∞------------------------------------------------------------------------------------------------------------------------------
@callback_router.callback_query(ApplicationStates.waiting_for_floor, F.data.startswith('floor_'))
async def process_floor(callback: CallbackQuery, state: FSMContext):
    floor_number = callback.data.split('_')[1]

    floor_name = {
        '2-5': '–≠—Ç–∞–∂: 2-5',
        '6-10': '–≠—Ç–∞–∂: 6-10',
        '11-16': '–≠—Ç–∞–∂: 11-16',
    }.get(floor_number) 

    await state.update_data(floor_number=floor_name)
    await state.set_state(ApplicationStates.waiting_for_apartment_number)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {floor_name}.\n\n–ö–∞–∫–æ–π —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?:",reply_markup=ikb.select_type_apartament_kb, parse_mode="Markdown")

# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã---------------------------------------------------------------------------------------------------------------------
@callback_router.callback_query(ApplicationStates.waiting_for_apartment_number, F.data.startswith('apartament_'))
async def process_apartment_number(callback: CallbackQuery ,state: FSMContext):
    apartment_type = callback.data.split("_")[1]

    apartment_name = {
        'studio': '–°—Ç—É–¥–∏—è',
        '1': '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è',
        '2': '2-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è',
        '3': '3-—Ö –∫–æ–º–Ω–∞—Ç–Ω–∞—è',
    }.get(apartment_type) 

    await state.update_data(apartment_type=apartment_name)
    await state.set_state(ApplicationStates.waiting_for_payment_method)
    await callback.message.answer("–ö–∞–∫–æ–π *—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã* –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª–µ–Ω?",
                         reply_markup=ikb.payment_methods_keyboard,
                         parse_mode="Markdown")

# 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (—á–µ—Ä–µ–∑ callback)
@callback_router.callback_query(ApplicationStates.waiting_for_payment_method, F.data.startswith('payment_'))
async def process_payment_method(callback: CallbackQuery, state: FSMContext):
    payment_method = callback.data.split('_')[1] # –ü–æ–ª—É—á–∞–µ–º "mortgage", "cash" –∏ —Ç.–¥.

    # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    method_display_name = {
        'mortgage': '–ò–ø–æ—Ç–µ–∫–∞',
        'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
        'installments': '–†–∞—Å—Å—Ä–æ—á–∫–∞',
        'other': '–î—Ä—É–≥–æ–µ'
    }.get(payment_method, payment_method) # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –ø–æ–∫–∞–∂–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    await state.update_data(payment_method=method_display_name)
    await state.set_state(ApplicationStates.waiting_for_name)
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{method_display_name}*.\n\n"
        "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–≤–∞—à–µ –ò–º—è*:",
        parse_mode="Markdown"
    )
    await callback.answer()

# 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
@callback_router.message(ApplicationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    user_name = message.text
    if not user_name or len(user_name.strip()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.")
        return

    await state.update_data(name=user_name.strip())
    await state.set_state(ApplicationStates.waiting_for_phone)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, *{}*!\n\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à *–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –¥–ª—è —Å–≤—è–∑–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:".format(user_name),
        reply_markup=rkb.request_phone_keyboard, # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞
        parse_mode="Markdown"
    )

# 7. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
@callback_router.message(ApplicationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone_number = None
    if message.contact: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        phone_number = message.contact.phone_number
    elif message.text: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(message.text) > 5 and all(c.isdigit() or c in '+-() ' for c in message.text):
            phone_number = message.text

    if not phone_number:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'* –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=rkb.request_phone_keyboard,
            
        )
        return

    await state.update_data(phone=phone_number)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()

    confirmation_message = (
        f"üìã *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        f"–ò–º—è: *{user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}*\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: `{user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}`\n"
        f"–≠—Ç–∞–∂–Ω–æ—Å—Ç—å: *{user_data.get('floor_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}*\n"
        f"–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã: *{user_data.get('apartment_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}*\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ *{user_data.get('apartment_plan', '–ù–µ —É–∫–∞–∑–∞–Ω')}*\n"
        f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: *{user_data.get('payment_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}*\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ª–∏ –≤—ã —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?"
    )

    await message.answer(confirmation_message, reply_markup=ikb.confirmation_keyboard)
    await state.set_state(ApplicationStates.waiting_for_confirmation)
  
@callback_router.callback_query(ApplicationStates.waiting_for_confirmation, F.data == 'confirm')
async def confirm_application(callback: CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_message_text = (
        f"üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–û–°–ú–û–¢–†/–ü–û–ö–£–ü–ö–£ –ö–í–ê–†–¢–ò–†–´!* üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: `{callback.from_user.id}` (@{callback.from_user.username})\n"
        f"–ò–º—è: *{user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}*\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: `{user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}`\n"
        f"-----------------------------------------\n"
        f"–≠—Ç–∞–∂–Ω–æ—Å—Ç—å: *{user_data.get('floor_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}*\n"
        f"–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã: *{user_data.get('apartment_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}*\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ *{user_data.get('apartment_plan', '–ù–µ —É–∫–∞–∑–∞–Ω')}*\n"
        f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: *{user_data.get('payment_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}*\n\n"
        f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ bot –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ message.bot)
    try:
        await callback.bot.send_message(ADMIN_CHAT_ID, admin_message_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.answer(
        "‚úÖ *–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!* ‚úÖ\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!",
        reply_markup=rkb.main # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

@callback_router.callback_query(ApplicationStates.waiting_for_confirmation, F.data == 'cancel')
async def cancel_application(callback: CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

    await callback.message.answer(
        "üòû –ñ–∞–ª—å, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞—à –±–æ—Ç –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!!",
        reply_markup=rkb.main # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–Ω–∞—á–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏