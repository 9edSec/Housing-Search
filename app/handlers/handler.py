import os
import re
import asyncio
import logging

from aiogram import F, Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import app.keyboards.reply_keyboard as rkb

router = Router()


PDF_FILE_PATH = 'media/about_pg/presentation.pdf'


class Form(StatesGroup):
    name = State()
    age = State()


def extract_number(text):
    match = re.search(r'\b(\d+)\b', text)
    if match:
        return int(match.group(1))
    else:
        return None


@router.message(CommandStart())
async def st_start(message: Message):
    await message.answer('–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!', reply_markup=rkb.selection_of_apartaments)


@router.message(F.text == '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É')
async def start_questionnaire_process(message: Message, state: FSMContext):
    await asyncio.sleep(2)
    await message.answer('–ü—Ä–∏–≤–µ—Ç. –ù–∞–ø–∏—à–∏ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç: ')
    await state.set_state(Form.name)

@router.message(F.text, Form.name)
async def capture_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await asyncio.sleep(2)
    await message.answer('–°—É–ø–µ—Ä! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç: ')
    await state.set_state(Form.age)

@router.message(F.text, Form.age)
async def capture_age(message: Message, state: FSMContext):
    check_age = extract_number(message.text)

    if not check_age or not (1 <= check_age <= 100):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100).')
        return
    await state.update_data(age=check_age)

    data = await state.get_data()
    msg_text = (f'–í–∞—Å –∑–æ–≤—É—Ç <b>{data.get("name")}</b> –∏ –≤–∞–º <b>{data.get("age")}</b> –ª–µ—Ç. '
                f'–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.' )
    await message.answer(msg_text)
    await state.clear()


@router.message(F.text == '–û –ü—É—à–∫–∏–Ω–æ –ì—Ä–∞–¥')
async def about_pg(message: Message):
    chat_id = message.chat.id

    if not os.path.exists(PDF_FILE_PATH):
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {PDF_FILE_PATH}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    try:
        # --- –ò–ó–ú–ï–ù–ò–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ ---
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        pdf_document = FSInputFile(PDF_FILE_PATH)
        # --- –ë—ã–ª–æ: pdf_document = InputFile(PDF_FILE_PATH) ---

        await message.bot.send_document(
            chat_id=chat_id,
            document=pdf_document, # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile
            caption="–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü—É—à–∫–∏–Ω–æ –ì—Ä–∞–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF! üè°‚ú®\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å."
        )

        logging.info(f"–§–∞–π–ª '–û –ü—É—à–∫–∏–Ω–æ –ì—Ä–∞–¥' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ '–û –ü—É—à–∫–∏–Ω–æ –ì—Ä–∞–¥': {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")